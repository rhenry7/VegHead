{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","toUpperCase","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOptions","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2bf6ca34.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n    render() {\n        return (\n        <div className = \"Business\" >\n            <div className = \"image-container\" >\n            <img src = {this.props.business.imageSrc}\n        alt = ''/> \n        </div>\n           <h2>{this.props.business.name}</h2> \n            <div className = \"Business-information\" >\n            <div className = \"Business-address\" >\n            <p> { this.props.business.address } </p>\n             <p > { this.props.business.city } </p> \n             <p > {`${this.props.business.state } ${this.props.business.zipCode }`}</p> \n             </div> \n             <div className = \"Business-reviews\" >\n            <h3 > {this.props.business.category.toUpperCase()}</h3> \n            <h3 className = \"rating\"> { `${this.props.business.rating} stars`} </h3> \n            <p> { `${this.props.business.reviewCount} reviews` }</p> \n            </div> \n            </div> \n            </div>)\n    }\n}\n\nexport default Business;","import React from 'react';\nimport \"./BusinessList.css\";\n\nimport Business from \"../Business/Business\";\n\n\nclass BusinessList extends React.Component {\n    render() {\n      return (\n        <div className=\"BusinessList\">\n          {\n            this.props.businesses.map(business => {\n              return <Business key={business.id} business={business} />\n            })\n          }\n        </div>\n      );\n    }\n  }\n  \n  export default BusinessList;\n\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nclass SearchBar extends React.Component{\n    constructor(props){\n      super(props);\n      this.state = {\n        term: 'Vegetarian',\n        location:'',\n        sortBy: 'best_match',\n      };\n\n      this.handleTermChange = this.handleTermChange.bind(this);\n      this.handleLocationChange = this.handleLocationChange.bind(this);\n      this.handleSearch = this.handleSearch.bind(this);\n      \n\n\n      this.sortByOptions = {\n        'Best Match': 'best_match', // original instructions were < best_match >\n        'Highest Rated': 'rating', // < rating >\n        'Most Reviewed': 'review_count' // < review_count >\n      };\n    }\n    getSortByClass(sortByOption) {\n      if (this.state.sortBy === sortByOption) {\n        return 'active';\n      }\n      return '';\n    }\n    handleSortByChange(sortByOption) {\n      this.setState({sortBy: sortByOption});\n    }\n  \n    handleTermChange(event){\n      this.setState({\n        term: event.target.value\n      })\n    }\n    handleLocationChange(event){\n      this.setState({\n        location: event.target.value\n      })\n    }\n    handleSearch(event){\n      this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n      event.preventDefault();\n    }\n    renderSortByOptions() {\n      return Object.keys(this.sortByOptions).map(sortByOption => {\n        let sortByOptionValue = this.sortByOptions[sortByOption];\n        return (<li className={this.getSortByClass(sortByOptionValue)}\n                    key={sortByOptionValue}\n                    onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>\n                  {sortByOption}\n               </li>);\n      });\n    }\n      render() {\n          return (\n          <div className=\"SearchBar\">\n          <div className=\"SearchBar-sort-options\">\n            <ul>\n              {this.renderSortByOptions()}\n            </ul>\n          </div>\n          <div className=\"SearchBar-fields\">\n          {/* the type of food goes here, it has been commented out  */}\n            {/* <input  placeholder=\"Search Businesses\" onChange={this.handleTermChange}/> */}\n            <input placeholder=\"Please enter Country, State, or Zip Code\" onChange={this.handleLocationChange} />\n          </div>\n          <div className=\"SearchBar-submit\">\n            <a onClick={this.handleSearch}>Let's Go</a>\n          </div>\n        </div>\n          );\n      }\n  }\n\n\n  export default SearchBar;","const apiKey = 'OK9hn0lVmAo90YAvAvhbtybSFz8oj2AN3_5K6zWjljE3-FakBT43U6CCrmCcqzqBqvo5FUSC5vyU8jnFROMhgrJpYAkGo4rx5mFyzHuAstdjvcrCCnSExqsRri_HXnYx';\n\nconst Yelp = {\n    search(term, location, sortBy) {\n        return fetch(\n                `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n                    headers: {\n                        Authorization: `Bearer ${apiKey}`\n                    }\n                }\n            )\n            .then(response => {\n                return response.json();\n            }).then(jsonResponse => {\n                if (jsonResponse.businesses) {\n                    return jsonResponse.businesses.map(business => ({\n                        id: business.id,\n                        imageSrc: business.image_url,\n                        name: business.name,\n                        address: business.location.address1,\n                        city: business.location.city,\n                        state: business.location.state,\n                        zipCode: business.location.zip_code,\n                        category: business.categories[0].title,\n                        rating: business.rating,\n                        reviewCount: business.review_count\n                    }));\n                }\n            });\n    }\n};\n\nexport default Yelp;","import React from 'react';\nimport './App.css';\n\nimport BusinessList from \"../BusinessList/BusinessList\";\nimport SearchBar from \"../SearchBar/SearchBar\";\n\nimport Yelp from \"../../util/Yelp.js\";\n// import { render } from 'react-dom';\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {businesses: []};\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  searchYelp(term, location, sortBy){\n     Yelp.search(term, location, sortBy).then(businesses => {this.setState({businesses: businesses})})\n  }\n  render() {\n    return (\n      <div className=\"App\">\n      <h1>VegHead</h1> \n      <SearchBar searchYelp={this.searchYelp}/>\n      <BusinessList businesses={this.state.businesses} />\n      \n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( \n    <React.StrictMode >\n    <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}